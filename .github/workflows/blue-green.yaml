name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    outputs:  
      deployment_result: ${{ steps.set-result.outputs.deployment_result }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Minikube
        run: |
          minikube start --driver=docker
          kubectl config use-context minikube

      - name: Load Docker images
        run: |
          minikube image load docker.io/library/blue_env:latest
          minikube image load docker.io/library/green_env:latest

      - name: Apply Blue Deployment
        run: |
          kubectl apply -f kubernets_yamls/blue_version.yaml
          kubectl apply -f kubernets_yamls/service.yaml

      - name: Apply Green Deployment
        run: |
          kubectl apply -f kubernets_yamls/green_version.yaml
        timeout-minutes: 1

      - name: Verify Green Deployment
        id: verify_green
        shell: powershell
        run: |
          try {
            $result = kubectl rollout status deployment/myapp-deployment-green 
            Write-Output "Deployment Status: $result"
            Write-Output "Exit code: $LASTEXITCODE"
            if ($LASTEXITCODE -eq 0) {
              Write-Output "Green deployment successful."
              Add-Content -Path $env:GITHUB_ENV -Value "RESULT=stable"
            } else {
              Write-Output "Green deployment failed. Continuing with blue deployment."
              Add-Content -Path $env:GITHUB_ENV -Value "RESULT=unstable"
            }
          } catch {
            Write-Output "Error occurred: $_"
            Add-Content -Path $env:GITHUB_ENV -Value "RESULT=unstable"
          }
        timeout-minutes: 1
        continue-on-error: true

      - name: Set RESULT as output for next job
        id: set-result  
        run: echo "deployment_result=${{ env.RESULT }}" >> $GITHUB_OUTPUT

      - name: Debug RESULT Variable
        run: |
          echo "RESULT is ${{ env.RESULT }}"

  manual_approve:
    needs: deploy 
    runs-on: self-hosted
    environment: production 
    steps:
      - name: Wait for manual approval
        run: echo "Manually approved"

      - name: Switch Traffic to Green and Delete Old Deployment
        if: ${{ needs.deploy.outputs.deployment_result == 'stable' }} 
        run: |
          kubectl patch service application-lb-service --type=merge -p '{\"spec\": {\"selector\": {\"app\": \"myapp\", \"version\": \"green\"}}}'
          echo "Application is running on green environment"
          kubectl delete deployment myapp-deployment-blue
          echo "Blue deployment deleted successfully"

      - name: Switch Traffic to Blue
        if: ${{ needs.deploy.outputs.deployment_result == 'unstable' }}  
        run: |
          kubectl patch service application-lb-service --type=merge -p '{\"spec\": {\"selector\": {\"app\": \"myapp\", \"version\": \"blue\"}}}'
          echo "Application is running on blue environment"

      - name: Expose Application
        run: |
          minikube service application-lb-service
        timeout-minutes: 1
        continue-on-error: true
