name: Blue-Green Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Minikube
        run: |
          minikube start --driver=none
          kubectl config use-context minikube

      - name: Load Docker images
        run: |
          minikube image load docker.io/library/blue_env:latest
          minikube image load docker.io/library/green_env:latest

      - name: Apply Blue Deployment
        run: |
          kubectl apply -f kubernets_yamls/blue_version.yaml
          kubectl apply -f kubernets_yamls/service.yaml

      - name: Apply Green Deployment
        run: |
          kubectl apply -f kubernets_yamls/green_version.yaml

      - name: Verify Green Deployment
        id: verify_green
        run: |
          timeout 10s kubectl rollout status deployment/myapp-deployment-green

        continue-on-error: true

      - name: Set Deployment Verification Status
        id: set_status
        shell: powershell
        run: |
          if ($?) {
            Write-Output "Green deployment successful."
            Add-Content -Path $env:GITHUB_ENV -Value "RESULT=stable"
          } else {
            Write-Output "Green deployment failed. Continuing with blue deployment."
            Add-Content -Path $env:GITHUB_ENV -Value "RESULT=unstable"
          }
          

      - name: Debug RESULT Variable
        run: |
          echo "RESULT is ${{ env.RESULT }}"

      - name: Switch Traffic to Green and delete old deployment
        if: ${{ env.RESULT == 'stable' }}
        run: |
          kubectl patch service application-lb-service --type=merge -p '{\"spec\": {\"selector\": {\"app\": \"myapp\", \"version\": \"green\"}}}'
          echo "Application is running on green environment"
          kubectl delete deployment myapp-deployment-blue
          echo "blue deployment deleted successfully"

      - name: Switch Traffic to Blue
        if: ${{ env.RESULT == 'unstable' }}
        run: |
          kubectl patch service application-lb-service --type=merge -p '{\"spec\": {\"selector\": {\"app\": \"myapp\", \"version\": \"blue\"}}}'
          echo "Application is running on blue environment"


      #- name: 
      #  shell: powershell  # Specify PowerShell as the shell
       # run: |
       #   powershell -Command "Start-Sleep -Seconds 15; minikube service application-lb-service"
       #   Stop-Process -Name "minikube" -Force
        #continue-on-error: true
          
          
      #- name: Stop the Application
        #shell: powershell  # Specify PowerShell as the shell
        #run: |
         # Stop-Process -Name "minikube" -Force
